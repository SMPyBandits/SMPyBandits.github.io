 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
ImportError: functools.lru_cache is not available, using a fake implementation.
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]
plots/ is already a directory here...
Number of policies in this comparaison: 11
Time horizon: 5000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 60.00% ...
Number of environments to try: 1

Evaluating environment: <MAB{'minArm': 0.10000000000000001, 'arms': [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], 'maxArm': 0.90000000000000002, 'nbArms': 9}>
- Adding policy #1 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this child player from a dictionnary 'children[6]' = {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this child player from a dictionnary 'children[7]' = {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this child player from a dictionnary 'children[8]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
- Adding policy #2 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'decreaseRate': 'auto', 'unbiased': False, 'learningRate': 0.01, 'update_all_children': False, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this child player from a dictionnary 'children[6]' = {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this child player from a dictionnary 'children[7]' = {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this child player from a dictionnary 'children[8]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
- Adding policy #3 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
- Adding policy #4 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #5 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
- Adding policy #6 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #7 = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #8 = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #9 = {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
- Adding policy #10 = {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][9]' = {'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>, 'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}} ...
- Adding policy #11 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][10]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...

===> Pre-computing the rewards ... Of shape (9, 4, 5000) ...
    In order for all simulated algorithms to face the same random rewards (robust comparaison of A1,..,An vs Aggr(A1,..,An)) ...


- Evaluating policy #1/11: Aggr($N=9$, Exp4) ...

- Evaluating policy #2/11: Aggr($N=9$) ...

- Evaluating policy #3/11: UCB($\alpha=1$) ...

Estimated order by the policy UCB($\alpha=1$) after 5000 steps: [4 5 3 0 1 2 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.62% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 78.91% (relative success)...
  ==> Spearman    distance from optimal ordering: 81.25% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 66.58% (relative success)...

- Evaluating policy #4/11: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 5000 steps: [0 3 1 2 4 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.92% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 94.73% (relative success)...

- Evaluating policy #5/11: UCB($\alpha=0.1$) ...

Estimated order by the policy UCB($\alpha=0.1$) after 5000 steps: [0 1 2 3 6 5 4 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 91.93% (relative success)...

- Evaluating policy #6/11: Thompson ...

Estimated order by the policy Thompson after 5000 steps: [3 0 1 4 2 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.75% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.36% (relative success)...

- Evaluating policy #7/11: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 5000 steps: [0 1 4 6 3 5 2 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 84.45% (relative success)...

- Evaluating policy #8/11: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 5000 steps: [0 1 2 3 4 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 100.00% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.98% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 100.00% (relative success)...
  ==> Mean distance from optimal ordering: 100.00% (relative success)...

- Evaluating policy #9/11: KL-UCB-H+(Bern) ...

Estimated order by the policy KL-UCB-H+(Bern) after 5000 steps: [0 1 2 3 5 4 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 95.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 95.98% (relative success)...

- Evaluating policy #10/11: KL-UCB++(Bern) ...

Estimated order by the policy KL-UCB++(Bern) after 5000 steps: [0 1 6 3 4 2 5 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.75% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 88.88% (relative success)...

- Evaluating policy #11/11: BayesUCB ...

Estimated order by the policy BayesUCB after 5000 steps: [1 2 5 0 4 6 7 3 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 95.76% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 81.04% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB($\alpha=0.1$)'	was ranked	1 / 11 for this simulation (last regret = 44.65).
- Policy 'BayesUCB'	was ranked	2 / 11 for this simulation (last regret = 52.4).
- Policy 'KL-UCB+(Bern)'	was ranked	3 / 11 for this simulation (last regret = 59.15).
- Policy 'Thompson'	was ranked	4 / 11 for this simulation (last regret = 59.15).
- Policy 'Aggr($N=9$)'	was ranked	5 / 11 for this simulation (last regret = 61.4).
- Policy 'UCB($\alpha=0.5$)'	was ranked	6 / 11 for this simulation (last regret = 65.65).
- Policy 'KL-UCB++(Bern)'	was ranked	7 / 11 for this simulation (last regret = 67.4).
- Policy 'KL-UCB-H+(Bern)'	was ranked	8 / 11 for this simulation (last regret = 69.9).
- Policy 'KL-UCB(Bern)'	was ranked	9 / 11 for this simulation (last regret = 76.15).
- Policy 'Aggr($N=9$, Exp4)'	was ranked	10 / 11 for this simulation (last regret = 76.65).
- Policy 'UCB($\alpha=1$)'	was ranked	11 / 11 for this simulation (last regret = 105.9).


==> To see the figures, do :
eog plots/T5000_N4__11_algos/main*2123835320620089852.png
Done for simulations main.py ...
